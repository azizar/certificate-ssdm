// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // engineType = "library"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  admin         Boolean         @default(false)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Person    Person[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Person {
  id         Int     @id @default(autoincrement())
  identifier String  @unique
  email      String  @unique
  name       String
  title      String?
  userId     String

  EventPersonAbsence EventPersonAbsence[]
  Certificate        Certificate[]
  User               User                 @relation(fields: [userId], references: [id])
}

model Event {
  id                    Int                  @id @default(autoincrement())
  name                  String
  person_responsibility String
  start_date            DateTime
  end_date              DateTime
  qr_code               String?
  qr_url                String?
  template_file         String?
  certificates          Certificate[]
  person_absences       EventPersonAbsence[]
  google_docs_id        String?
}

model EventPersonAbsence {
  id          Int      @id @default(autoincrement())
  absenceDate DateTime
  eventId     Int
  personId    Int
  event       Event    @relation(fields: [eventId], references: [id])
  person      Person   @relation(fields: [personId], references: [id])
}

model Certificate {
  id       Int     @id @default(autoincrement())
  eventId  Int
  personId Int
  event    Event   @relation(fields: [eventId], references: [id])
  person   Person  @relation(fields: [personId], references: [id])
  status   String?
  cert_url String?
}
